// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: user/server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	focus "tinytiktok/user/proto/focus"
	followList "tinytiktok/user/proto/followList"
	followerList "tinytiktok/user/proto/followerList"
	friendList "tinytiktok/user/proto/friendList"
	info2 "tinytiktok/user/proto/info2"
	login "tinytiktok/user/proto/login"
	messageAct "tinytiktok/user/proto/messageAct"
	messageChat "tinytiktok/user/proto/messageChat"
	register "tinytiktok/user/proto/register"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_Register_FullMethodName     = "/userServer.UserService/Register"
	UserService_Login_FullMethodName        = "/userServer.UserService/Login"
	UserService_Info_FullMethodName         = "/userServer.UserService/Info"
	UserService_FollowList_FullMethodName   = "/userServer.UserService/FollowList"
	UserService_FollowerList_FullMethodName = "/userServer.UserService/FollowerList"
	UserService_Favorite_FullMethodName     = "/userServer.UserService/Favorite"
	UserService_FriendList_FullMethodName   = "/userServer.UserService/FriendList"
	UserService_MessageAct_FullMethodName   = "/userServer.UserService/MessageAct"
	UserService_MassageChat_FullMethodName  = "/userServer.UserService/MassageChat"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Register(ctx context.Context, in *register.RegisterRequest, opts ...grpc.CallOption) (*register.RegisterResponse, error)
	Login(ctx context.Context, in *login.LoginRequest, opts ...grpc.CallOption) (*login.LoginResponse, error)
	Info(ctx context.Context, in *info2.UserRequest, opts ...grpc.CallOption) (*info2.UserResponse, error)
	// 关注列表
	FollowList(ctx context.Context, in *followList.FollowListRequest, opts ...grpc.CallOption) (*followList.FollowListResponse, error)
	// 粉丝列表
	FollowerList(ctx context.Context, in *followerList.FollowerListRequest, opts ...grpc.CallOption) (*followerList.FollowerListResponse, error)
	// 关注操作
	Favorite(ctx context.Context, in *focus.FavoriteRequest, opts ...grpc.CallOption) (*focus.FavoriteResponse, error)
	// 好友列表
	FriendList(ctx context.Context, in *friendList.FriendListRequest, opts ...grpc.CallOption) (*friendList.FriendListResponse, error)
	// 发送信息
	MessageAct(ctx context.Context, in *messageAct.MessageActionRequest, opts ...grpc.CallOption) (*messageAct.MessageActionResponse, error)
	// 聊天记录
	MassageChat(ctx context.Context, in *messageChat.MessageChatRequest, opts ...grpc.CallOption) (*messageChat.MessageChatResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Register(ctx context.Context, in *register.RegisterRequest, opts ...grpc.CallOption) (*register.RegisterResponse, error) {
	out := new(register.RegisterResponse)
	err := c.cc.Invoke(ctx, UserService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *login.LoginRequest, opts ...grpc.CallOption) (*login.LoginResponse, error) {
	out := new(login.LoginResponse)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Info(ctx context.Context, in *info2.UserRequest, opts ...grpc.CallOption) (*info2.UserResponse, error) {
	out := new(info2.UserResponse)
	err := c.cc.Invoke(ctx, UserService_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FollowList(ctx context.Context, in *followList.FollowListRequest, opts ...grpc.CallOption) (*followList.FollowListResponse, error) {
	out := new(followList.FollowListResponse)
	err := c.cc.Invoke(ctx, UserService_FollowList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FollowerList(ctx context.Context, in *followerList.FollowerListRequest, opts ...grpc.CallOption) (*followerList.FollowerListResponse, error) {
	out := new(followerList.FollowerListResponse)
	err := c.cc.Invoke(ctx, UserService_FollowerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Favorite(ctx context.Context, in *focus.FavoriteRequest, opts ...grpc.CallOption) (*focus.FavoriteResponse, error) {
	out := new(focus.FavoriteResponse)
	err := c.cc.Invoke(ctx, UserService_Favorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FriendList(ctx context.Context, in *friendList.FriendListRequest, opts ...grpc.CallOption) (*friendList.FriendListResponse, error) {
	out := new(friendList.FriendListResponse)
	err := c.cc.Invoke(ctx, UserService_FriendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) MessageAct(ctx context.Context, in *messageAct.MessageActionRequest, opts ...grpc.CallOption) (*messageAct.MessageActionResponse, error) {
	out := new(messageAct.MessageActionResponse)
	err := c.cc.Invoke(ctx, UserService_MessageAct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) MassageChat(ctx context.Context, in *messageChat.MessageChatRequest, opts ...grpc.CallOption) (*messageChat.MessageChatResponse, error) {
	out := new(messageChat.MessageChatResponse)
	err := c.cc.Invoke(ctx, UserService_MassageChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	Register(context.Context, *register.RegisterRequest) (*register.RegisterResponse, error)
	Login(context.Context, *login.LoginRequest) (*login.LoginResponse, error)
	Info(context.Context, *info2.UserRequest) (*info2.UserResponse, error)
	// 关注列表
	FollowList(context.Context, *followList.FollowListRequest) (*followList.FollowListResponse, error)
	// 粉丝列表
	FollowerList(context.Context, *followerList.FollowerListRequest) (*followerList.FollowerListResponse, error)
	// 关注操作
	Favorite(context.Context, *focus.FavoriteRequest) (*focus.FavoriteResponse, error)
	// 好友列表
	FriendList(context.Context, *friendList.FriendListRequest) (*friendList.FriendListResponse, error)
	// 发送信息
	MessageAct(context.Context, *messageAct.MessageActionRequest) (*messageAct.MessageActionResponse, error)
	// 聊天记录
	MassageChat(context.Context, *messageChat.MessageChatRequest) (*messageChat.MessageChatResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Register(context.Context, *register.RegisterRequest) (*register.RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *login.LoginRequest) (*login.LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) Info(context.Context, *info2.UserRequest) (*info2.UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedUserServiceServer) FollowList(context.Context, *followList.FollowListRequest) (*followList.FollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowList not implemented")
}
func (UnimplementedUserServiceServer) FollowerList(context.Context, *followerList.FollowerListRequest) (*followerList.FollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowerList not implemented")
}
func (UnimplementedUserServiceServer) Favorite(context.Context, *focus.FavoriteRequest) (*focus.FavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Favorite not implemented")
}
func (UnimplementedUserServiceServer) FriendList(context.Context, *friendList.FriendListRequest) (*friendList.FriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendList not implemented")
}
func (UnimplementedUserServiceServer) MessageAct(context.Context, *messageAct.MessageActionRequest) (*messageAct.MessageActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageAct not implemented")
}
func (UnimplementedUserServiceServer) MassageChat(context.Context, *messageChat.MessageChatRequest) (*messageChat.MessageChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MassageChat not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(register.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*register.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(login.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*login.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(info2.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Info(ctx, req.(*info2.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(followList.FollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FollowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FollowList(ctx, req.(*followList.FollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(followerList.FollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FollowerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FollowerList(ctx, req.(*followerList.FollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Favorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(focus.FavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Favorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Favorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Favorite(ctx, req.(*focus.FavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(friendList.FriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FriendList(ctx, req.(*friendList.FriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_MessageAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messageAct.MessageActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).MessageAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_MessageAct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).MessageAct(ctx, req.(*messageAct.MessageActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_MassageChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messageChat.MessageChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).MassageChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_MassageChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).MassageChat(ctx, req.(*messageChat.MessageChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userServer.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _UserService_Info_Handler,
		},
		{
			MethodName: "FollowList",
			Handler:    _UserService_FollowList_Handler,
		},
		{
			MethodName: "FollowerList",
			Handler:    _UserService_FollowerList_Handler,
		},
		{
			MethodName: "Favorite",
			Handler:    _UserService_Favorite_Handler,
		},
		{
			MethodName: "FriendList",
			Handler:    _UserService_FriendList_Handler,
		},
		{
			MethodName: "MessageAct",
			Handler:    _UserService_MessageAct_Handler,
		},
		{
			MethodName: "MassageChat",
			Handler:    _UserService_MassageChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/server.proto",
}
